#!/usr/bin/node

/**
 * Search & Replace previous release numbers
 * such as `3.15`, `3.15.0`, `v3.15.0` or `release`
 * to the provided release number for guides and api URLs
 *
 * Running tests:
 * ./update-version-links --tests
 *
 * How to use:
 * ./update-version-links <guides-path> <release-number> <options...>
 *
 * Examples:
 * ./update-version-links ../guides/v3.21.0 3.21
 * ./update-version-links ../guides/v3.21.0 3.21 --dry-run
 * ./update-version-links ../guides/v3.21.0 3.21 --silent
 * ./update-version-links ../guides/v3.21.0 3.21 --verbose
 *
 * Will replace the following:
 * https://api.emberjs.com/ember/release/ -> https://api.emberjs.com/ember/3.21/
 * https://api.emberjs.com/ember/3.15/ -> https://api.emberjs.com/ember/3.21/
 * https://api.emberjs.com/ember-data/release/ -> https://api.emberjs.com/ember-data/3.21/
 * https://api.emberjs.com/ember-data/3.15/ -> https://api.emberjs.com/ember-data/3.21/
 * https://guides.emberjs.com/release/getting-started/ -> https://guides.emberjs.com/v3.21/getting-started/
 */

const fs = require('fs');

const replaceURLsVersions = (str, version) => {
  let output;

  // guides use `v3.20.0` version format
  const patchVersion = /\d+\.\d+.\d+/.test(version) ? version : version + '.0';
  output = str.replace(
    /https:\/\/guides.emberjs.com\/(release|v\d+\.\d+.\d+)(\/?)/g,
    `https://guides.emberjs.com/v${patchVersion}$2`
  );

  // apis use `3.20` version format
  output = output.replace(
    /https:\/\/api.emberjs.com\/(ember|ember-data)\/(release|\d+\.\d+)(\/?)/g,
    `https://api.emberjs.com/$1/${version}$3`
  );

  return output;
};

const runTests = () => {
  let test;

  console.log('Running tests...');

  test = replaceURLsVersions('https://api.emberjs.com/ember/release/', '3.15');
  console.log(test === 'https://api.emberjs.com/ember/3.15/' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember/release', '3.15');
  console.log(test === 'https://api.emberjs.com/ember/3.15' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember/3.20/', '3.15');
  console.log(test === 'https://api.emberjs.com/ember/3.15/' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember/3.20', '3.15');
  console.log(test === 'https://api.emberjs.com/ember/3.15' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember/release/classes/Application', '3.15');
  console.log(test === 'https://api.emberjs.com/ember/3.15/classes/Application' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember-data/release/', '3.15');
  console.log(test === 'https://api.emberjs.com/ember-data/3.15/' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember-data/release', '3.15');
  console.log(test === 'https://api.emberjs.com/ember-data/3.15' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember-data/release/classes/Model/', '3.15');
  console.log(test === 'https://api.emberjs.com/ember-data/3.15/classes/Model/' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember-data/3.20/classes/Model/', '3.15');
  console.log(test === 'https://api.emberjs.com/ember-data/3.15/classes/Model/' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://api.emberjs.com/ember/release/classes/@ember%2Fapplication/methods/getOwner', '3.15');
  console.log(test === 'https://api.emberjs.com/ember/3.15/classes/@ember%2Fapplication/methods/getOwner' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://guides.emberjs.com/release/getting-started/', '3.15');
  console.log(test === 'https://guides.emberjs.com/v3.15.0/getting-started/' ? '✅' : '❌', test);

  test = replaceURLsVersions('https://guides.emberjs.com/release/getting-started/', '3.16.0');
  console.log(test === 'https://guides.emberjs.com/v3.16.0/getting-started/' ? '✅' : '❌', test);
};

if (process.argv[2] === '--tests') {
  runTests();
  process.exit(0);
}

const currentFolder = fs.realpathSync(process.argv[2]);
const newVersionNumber = process.argv[3];

let dryRun = false;
let verbose = false;
let silent = false;

if (process.argv.length > 4) {
  const options = process.argv.slice(4);
  dryRun = options.includes('--dry-run');
  verbose = options.includes('--verbose');
  silent = options.includes('--silent');
}

let filesFound = [];
let filesUpdated = [];

const recursion = (path) => {
  const files = fs.readdirSync(path);
  files.forEach((fileName) => {
    const filePath = `${path}/${fileName}`;
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      recursion(filePath);
    } else if (fileName.endsWith('.md')) {
      const currentOutput = fs.readFileSync(filePath).toString();
      const newOutput = replaceURLsVersions(currentOutput, newVersionNumber);

      if (currentOutput !== newOutput) {
        if (!dryRun) {
          fs.writeFileSync(filePath, newOutput);
        }
        filesUpdated.push(filePath);
      }

      filesFound.push(filePath);
    }
  });
}

if (silent) {
  recursion(currentFolder);
} else {
  console.log('Welcome to the automated process of updating the Guides version links');
  console.log();

  if (dryRun) {
    console.log('❗ Running on --dry-run. Files will NOT be updated.');
    console.log();
  }

  recursion(currentFolder);

  console.log(`Found: ${filesFound.length} files`);
  console.log(`${dryRun ? 'To be updated:' : 'Updated:'} ${filesUpdated.length} files`);

  if (verbose) {
    console.log();
    console.log(filesUpdated);
  }
}
